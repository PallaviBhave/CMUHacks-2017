<!DOCTYPE html>
<html>
  <head>
    <style>
      body
      {
        background-color: #BF3EFF;
        font-size: 15pt;
        font-weight: bold;
        color: yellow;

      }
      .title, .intro, .form_for_song
      {
        text-align: center;
      }
      .button
      {
        background-color: blue;
        color: yellow;
      }
    </style>


    <div class = "header">
      <h1 class = "title"> Let's Nacho </h1>
      <p class = "intro"> Want to create a combined playlist with your friends for a party? Do it here!</p>
    </div>
  <script> 
    var songID = "AXOPSJH3yRY"; 
  </script>

    <div class = "form_for_song">
      <form id = "youtube">
        Find your song ID:
        <input type = "text" placeholder = "Ex: AXOPSJH3yRY" id = "youtubeID">
        <button id = "button" onclick = "return onYouTubeIframeAPIReady()"> Submit </button>
        <br>
      </form>
      <br>
  </head>


  <body>
    <script src="https://apis.google.com/js/client.js?onload=function"></script>
    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div id="player"></div>

    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      songID = document.getElementById("youtubeID").value;
      console.log(songID);

      function onYouTubeIframeAPIReady() 
      {
        player = new YT.Player('player', {
          height: '390',
          width: '640',
          videoId: songID,
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        })
        return false;
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 6000);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
    </script>



  </body>
</html>
